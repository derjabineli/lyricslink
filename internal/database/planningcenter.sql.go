// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: planningcenter.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserSongRelation = `-- name: CreateUserSongRelation :exec
INSERT INTO users_songs (id, user_id, song_id)
VALUES(gen_random_uuid(), $1, $2)
`

type CreateUserSongRelationParams struct {
	UserID uuid.UUID
	SongID uuid.UUID
}

func (q *Queries) CreateUserSongRelation(ctx context.Context, arg CreateUserSongRelationParams) error {
	_, err := q.db.ExecContext(ctx, createUserSongRelation, arg.UserID, arg.SongID)
	return err
}

const savePCArrangement = `-- name: SavePCArrangement :one
INSERT INTO arrangements (id, created_at, updated_at, name, lyrics, chord_chart, chord_chart_key, has_chord_chart, has_chords, pc_id, song_id)
VALUES(gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (pc_id) 
DO UPDATE SET
    updated_at = NOW(),
    name = EXCLUDED.name,
    lyrics = EXCLUDED.lyrics,
    chord_chart = EXCLUDED.chord_chart, 
    chord_chart_key = EXCLUDED.chord_chart_key, 
    has_chord_chart = EXCLUDED.has_chord_chart, 
    has_chords = EXCLUDED.has_chords
RETURNING id
`

type SavePCArrangementParams struct {
	Name          string
	Lyrics        string
	ChordChart    sql.NullString
	ChordChartKey sql.NullString
	HasChordChart sql.NullBool
	HasChords     sql.NullBool
	PcID          sql.NullInt32
	SongID        uuid.UUID
}

func (q *Queries) SavePCArrangement(ctx context.Context, arg SavePCArrangementParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, savePCArrangement,
		arg.Name,
		arg.Lyrics,
		arg.ChordChart,
		arg.ChordChartKey,
		arg.HasChordChart,
		arg.HasChords,
		arg.PcID,
		arg.SongID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const savePCSong = `-- name: SavePCSong :one
INSERT INTO songs (id, created_at, updated_at, title, themes, copy_right, ccli_number, author, admin, pc_id)
VALUES(gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (pc_id) 
DO UPDATE SET
    updated_at = NOW(),
    title = EXCLUDED.title,
    themes = EXCLUDED.themes,
    copy_right = EXCLUDED.copy_right, 
    ccli_number = EXCLUDED.ccli_number, 
    author = EXCLUDED.author, 
    admin = EXCLUDED.admin
RETURNING id
`

type SavePCSongParams struct {
	Title      string
	Themes     sql.NullString
	CopyRight  sql.NullString
	CcliNumber sql.NullInt32
	Author     sql.NullString
	Admin      sql.NullString
	PcID       sql.NullInt32
}

func (q *Queries) SavePCSong(ctx context.Context, arg SavePCSongParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, savePCSong,
		arg.Title,
		arg.Themes,
		arg.CopyRight,
		arg.CcliNumber,
		arg.Author,
		arg.Admin,
		arg.PcID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
