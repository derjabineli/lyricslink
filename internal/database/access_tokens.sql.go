// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: access_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addAccessToken = `-- name: AddAccessToken :one
INSERT INTO planning_center_tokens(id, user_id, access_token, token_type, expires_in, refresh_token, scope, created_at, updated_at, revoked)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, NOW(), NOW(), FALSE)
ON CONFLICT (user_id) DO UPDATE 
    SET access_token = EXCLUDED.access_token,
        token_type = EXCLUDED.token_type,
        expires_in = EXCLUDED.expires_in,
        refresh_token = EXCLUDED.refresh_token,
        scope = EXCLUDED.scope,
        updated_at = NOW()
RETURNING id, user_id, access_token, token_type, expires_in, refresh_token, scope, created_at, updated_at, revoked
`

type AddAccessTokenParams struct {
	UserID       uuid.UUID
	AccessToken  string
	TokenType    string
	ExpiresIn    int32
	RefreshToken string
	Scope        string
}

func (q *Queries) AddAccessToken(ctx context.Context, arg AddAccessTokenParams) (PlanningCenterToken, error) {
	row := q.db.QueryRowContext(ctx, addAccessToken,
		arg.UserID,
		arg.AccessToken,
		arg.TokenType,
		arg.ExpiresIn,
		arg.RefreshToken,
		arg.Scope,
	)
	var i PlanningCenterToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.TokenType,
		&i.ExpiresIn,
		&i.RefreshToken,
		&i.Scope,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Revoked,
	)
	return i, err
}

const getTokenByUserID = `-- name: GetTokenByUserID :one
SELECT id, user_id, access_token, token_type, expires_in, refresh_token, scope, created_at, updated_at, revoked FROM planning_center_tokens
WHERE user_id = $1
`

func (q *Queries) GetTokenByUserID(ctx context.Context, userID uuid.UUID) (PlanningCenterToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUserID, userID)
	var i PlanningCenterToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.TokenType,
		&i.ExpiresIn,
		&i.RefreshToken,
		&i.Scope,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Revoked,
	)
	return i, err
}
