// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events_arragnements.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getArrangementsWithEventId = `-- name: GetArrangementsWithEventId :many
SELECT 
    a.id, a.name, a.lyrics, a.chord_chart, a.song_id, 
    CASE 
        WHEN a.id = ea.arrangement_id THEN TRUE 
        ELSE FALSE 
    END AS is_selected
FROM events_arrangements ea
JOIN arrangements a 
    ON a.song_id = (
        SELECT song_id FROM arrangements WHERE id = ea.arrangement_id
    )
WHERE ea.event_id = $1
ORDER BY is_selected DESC
`

type GetArrangementsWithEventIdRow struct {
	ID         uuid.UUID
	Name       string
	Lyrics     string
	ChordChart sql.NullString
	SongID     uuid.UUID
	IsSelected bool
}

func (q *Queries) GetArrangementsWithEventId(ctx context.Context, eventID uuid.UUID) ([]GetArrangementsWithEventIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getArrangementsWithEventId, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArrangementsWithEventIdRow
	for rows.Next() {
		var i GetArrangementsWithEventIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lyrics,
			&i.ChordChart,
			&i.SongID,
			&i.IsSelected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
