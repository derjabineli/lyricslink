// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events_arragnements.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addArrangementToEvent = `-- name: AddArrangementToEvent :one
INSERT INTO events_arrangements (id, event_id, arrangement_id, created_at, updated_at)
VALUES (gen_random_uuid(), $1, $2, NOW(), NOW())
RETURNING event_id, id, created_at, updated_at, arrangement_id
`

type AddArrangementToEventParams struct {
	EventID       uuid.UUID
	ArrangementID uuid.UUID
}

func (q *Queries) AddArrangementToEvent(ctx context.Context, arg AddArrangementToEventParams) (EventsArrangement, error) {
	row := q.db.QueryRowContext(ctx, addArrangementToEvent, arg.EventID, arg.ArrangementID)
	var i EventsArrangement
	err := row.Scan(
		&i.EventID,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArrangementID,
	)
	return i, err
}

const getArrangementsWithEventId = `-- name: GetArrangementsWithEventId :many
SELECT 
    a.name, a.lyrics, a.chord_chart, a.id, a.pc_id, a.chord_chart_key, a.song_id, a.created_at, a.updated_at, a.has_chords, a.has_chord_chart, 
    CASE 
        WHEN a.id = ea.arrangement_id THEN TRUE 
        ELSE FALSE 
    END AS is_selected
FROM events_arrangements ea
JOIN arrangements a 
    ON a.song_id = (
        SELECT song_id FROM arrangements WHERE id = ea.arrangement_id
    )
WHERE ea.event_id = $1
ORDER BY ea.created_at DESC,  is_selected DESC
`

type GetArrangementsWithEventIdRow struct {
	Name          string
	Lyrics        string
	ChordChart    sql.NullString
	ID            uuid.UUID
	PcID          sql.NullInt32
	ChordChartKey sql.NullString
	SongID        uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	HasChords     bool
	HasChordChart bool
	IsSelected    bool
}

func (q *Queries) GetArrangementsWithEventId(ctx context.Context, eventID uuid.UUID) ([]GetArrangementsWithEventIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getArrangementsWithEventId, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArrangementsWithEventIdRow
	for rows.Next() {
		var i GetArrangementsWithEventIdRow
		if err := rows.Scan(
			&i.Name,
			&i.Lyrics,
			&i.ChordChart,
			&i.ID,
			&i.PcID,
			&i.ChordChartKey,
			&i.SongID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.HasChords,
			&i.HasChordChart,
			&i.IsSelected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
