// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: songs.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addSong = `-- name: AddSong :one
INSERT INTO songs (id, created_at, updated_at, title, themes, copy_right, ccli_number, author, admin, pc_id)
    VALUES(gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (pc_id) DO UPDATE 
    SET title = EXCLUDED.title,
        themes = EXCLUDED.themes,
        copy_right = EXCLUDED.copy_right,
        ccli_number = EXCLUDED.ccli_number,
        author = EXCLUDED.author,
        admin = EXCLUDED.admin,
        updated_at = NOW()
RETURNING id
`

type AddSongParams struct {
	Title      string
	Themes     sql.NullString
	CopyRight  sql.NullString
	CcliNumber sql.NullInt32
	Author     sql.NullString
	Admin      sql.NullString
	PcID       sql.NullInt32
}

func (q *Queries) AddSong(ctx context.Context, arg AddSongParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addSong,
		arg.Title,
		arg.Themes,
		arg.CopyRight,
		arg.CcliNumber,
		arg.Author,
		arg.Admin,
		arg.PcID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getSongById = `-- name: GetSongById :one
SELECT pc_id, admin, author, ccli_number, copy_right, themes, title, id, created_at, updated_at FROM songs
WHERE id = $1
`

func (q *Queries) GetSongById(ctx context.Context, id uuid.UUID) (Song, error) {
	row := q.db.QueryRowContext(ctx, getSongById, id)
	var i Song
	err := row.Scan(
		&i.PcID,
		&i.Admin,
		&i.Author,
		&i.CcliNumber,
		&i.CopyRight,
		&i.Themes,
		&i.Title,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSongIdByPCId = `-- name: GetSongIdByPCId :one
SELECT id FROM songs
WHERE pc_id = $1
`

func (q *Queries) GetSongIdByPCId(ctx context.Context, pcID sql.NullInt32) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getSongIdByPCId, pcID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const searchSongs = `-- name: SearchSongs :many
SELECT us.song_id, s.pc_id, s.admin, s.author, s.ccli_number, s.copy_right, s.themes, s.title, s.id, s.created_at, s.updated_at FROM users_songs us
RIGHT JOIN songs s ON s.id = us.song_id
WHERE us.user_id = $1 AND title LIKE $2
`

type SearchSongsParams struct {
	UserID uuid.UUID
	Title  string
}

type SearchSongsRow struct {
	SongID     uuid.NullUUID
	PcID       sql.NullInt32
	Admin      sql.NullString
	Author     sql.NullString
	CcliNumber sql.NullInt32
	CopyRight  sql.NullString
	Themes     sql.NullString
	Title      string
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) SearchSongs(ctx context.Context, arg SearchSongsParams) ([]SearchSongsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchSongs, arg.UserID, arg.Title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchSongsRow
	for rows.Next() {
		var i SearchSongsRow
		if err := rows.Scan(
			&i.SongID,
			&i.PcID,
			&i.Admin,
			&i.Author,
			&i.CcliNumber,
			&i.CopyRight,
			&i.Themes,
			&i.Title,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
