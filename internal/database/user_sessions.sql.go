// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_sessions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addUserSession = `-- name: AddUserSession :one
INSERT INTO user_sessions(id, user_id, access_token, token_type, expires_in, refresh_token, scope, created_at, updated_at, revoked)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, NOW(), NOW(), FALSE)
RETURNING id, user_id, access_token, token_type, expires_in, refresh_token, scope, created_at, updated_at, revoked
`

type AddUserSessionParams struct {
	UserID       uuid.UUID
	AccessToken  string
	TokenType    string
	ExpiresIn    int32
	RefreshToken string
	Scope        string
}

func (q *Queries) AddUserSession(ctx context.Context, arg AddUserSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, addUserSession,
		arg.UserID,
		arg.AccessToken,
		arg.TokenType,
		arg.ExpiresIn,
		arg.RefreshToken,
		arg.Scope,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.TokenType,
		&i.ExpiresIn,
		&i.RefreshToken,
		&i.Scope,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Revoked,
	)
	return i, err
}

const getSessionRevokedStatus = `-- name: GetSessionRevokedStatus :one
SELECT revoked FROM user_sessions
WHERE id = $1
`

func (q *Queries) GetSessionRevokedStatus(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, getSessionRevokedStatus, id)
	var revoked bool
	err := row.Scan(&revoked)
	return revoked, err
}

const revokeSession = `-- name: RevokeSession :exec
UPDATE user_sessions
SET revoked = TRUE
WHERE id = $1
`

func (q *Queries) RevokeSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeSession, id)
	return err
}
