// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (id, created_at, updated_at, name, date, user_id)
VALUES(gen_random_uuid(), NOW(), NOW(), $1, $2, $3)
RETURNING id, name, date, created_at, updated_at, user_id
`

type CreateEventParams struct {
	Name   string
	Date   time.Time
	UserID uuid.UUID
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.Name, arg.Date, arg.UserID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DElETE FROM events
WHERE id = $1 AND user_id = $2
`

type DeleteEventParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteEvent(ctx context.Context, arg DeleteEventParams) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, arg.ID, arg.UserID)
	return err
}

const getEventById = `-- name: GetEventById :one
SELECT id, name, date, created_at, updated_at, user_id FROM events 
WHERE id = $1
`

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventById, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getEventsByUserId = `-- name: GetEventsByUserId :many
SELECT id, name, date, created_at, updated_at, user_id FROM events
WHERE user_id = $1
`

func (q *Queries) GetEventsByUserId(ctx context.Context, userID uuid.UUID) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventDate = `-- name: UpdateEventDate :one
UPDATE events
SET date = $1
WHERE id = $2
RETURNING id, name, date, created_at, updated_at, user_id
`

type UpdateEventDateParams struct {
	Date time.Time
	ID   uuid.UUID
}

func (q *Queries) UpdateEventDate(ctx context.Context, arg UpdateEventDateParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEventDate, arg.Date, arg.ID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
