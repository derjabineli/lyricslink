// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, first_name, last_name, email, created_at, updated_at, avatar, pc_id, administrator)
VALUES(gen_random_uuid(), $1, $2, $3, NOW(), NOW(), $4, $5, $6)
ON CONFLICT (pc_id) DO UPDATE 
    SET email = EXCLUDED.email,
        updated_at = NOW(),
        avatar = EXCLUDED.avatar,
        administrator = EXCLUDED.administrator
RETURNING id, first_name, last_name, email, created_at, updated_at, administrator, avatar, pc_id
`

type CreateUserParams struct {
	FirstName     string
	LastName      string
	Email         string
	Avatar        string
	PcID          string
	Administrator bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Avatar,
		arg.PcID,
		arg.Administrator,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Administrator,
		&i.Avatar,
		&i.PcID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, created_at, updated_at, administrator, avatar, pc_id FROM users 
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Administrator,
		&i.Avatar,
		&i.PcID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, created_at, updated_at, administrator, avatar, pc_id FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Administrator,
		&i.Avatar,
		&i.PcID,
	)
	return i, err
}

const getUserByPCID = `-- name: GetUserByPCID :one
SELECT id, first_name, last_name, email, created_at, updated_at, administrator, avatar, pc_id FROM users
WHERE pc_id = $1
`

func (q *Queries) GetUserByPCID(ctx context.Context, pcID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPCID, pcID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Administrator,
		&i.Avatar,
		&i.PcID,
	)
	return i, err
}

const updatePlanningCenterUser = `-- name: UpdatePlanningCenterUser :exec
UPDATE users 
SET avatar = $1, pc_id = $2
WHERE id = $3
`

type UpdatePlanningCenterUserParams struct {
	Avatar string
	PcID   string
	ID     uuid.UUID
}

func (q *Queries) UpdatePlanningCenterUser(ctx context.Context, arg UpdatePlanningCenterUserParams) error {
	_, err := q.db.ExecContext(ctx, updatePlanningCenterUser, arg.Avatar, arg.PcID, arg.ID)
	return err
}
